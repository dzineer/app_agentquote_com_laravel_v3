<?php
/*
 * DZFlowroute
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace DZFlowroute\Controllers;

use DZFlowroute\APIException;
use DZFlowroute\APIHelper;
use DZFlowroute\Configuration;
use DZFlowroute\Models;
use DZFlowroute\Exceptions;
use DZFlowroute\Http\HttpRequest;
use DZFlowroute\Http\HttpResponse;
use DZFlowroute\Http\HttpMethod;
use DZFlowroute\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class NumbersController extends BaseController
{
    /**
     * @var NumbersController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return NumbersController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (NULL === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Returns a list of all phone numbers currently on your Flowroute account. The response includes
     * details such as the phone number's rate center, state, number type, and whether CNAM Lookup is
     * enabled for that number.
     *
     * @param integer $startsWith  (optional) Retrieves phone numbers that start with the specified value.
     * @param integer $endsWith    (optional) Retrieves phone numbers that end with the specified value.
     * @param integer $contains    (optional) Retrieves phone numbers containing the specified value.
     * @param integer $limit       (optional) Limits the number of items to retrieve. A maximum of 200 items can be
     *                             retrieved.
     * @param integer $offset      (optional) Offsets the list of phone numbers by your specified value. For example,
     *                             if you have 4 phone numbers and you entered 1 as your offset value, then only 3 of
     *                             your phone numbers will be displayed in the response.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getAccountPhoneNumbers(
        $startsWith = NULL,
        $endsWith = NULL,
        $contains = NULL,
        $limit = 10,
        $offset = 0
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'starts_with' => $startsWith,
            'ends_with'   => $endsWith,
            'contains'    => $contains,
            'limit'       => $limit,
            'offset'      => $offset,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Lists all of the information associated with any of the phone numbers in your account, including
     * billing method, primary voice route, and failover voice route.
     *
     * @param integer $id Phone number to search for which must be a number that you own. Must be in 11-digit E.164
     *                    format; e.g. 12061231234.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getPhoneNumberDetails($id) {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/{id}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'id' => $id
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized', $_httpContext);
        }

        if ($response->code == 404) {
            throw new APIException('Not Found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'DZFlowroute\\Models\\Number26');
    }

    /**
     * Lets you purchase a phone number from available Flowroute inventory.
     *
     * @param integer $id Phone number to purchase. Must be in 11-digit E.164 format; e.g. 12061231234.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPurchaseAPhoneNumber(
        $id
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/' . $id;

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'id' => $id,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'DZFlowroute\\Models\\Number26');
    }

    /**
     * Lets you remove a purchased phone number from your inventory.
     *
     * @param integer $id Phone number to purchase. Must be in 11-digit E.164 format; e.g. 12061231234.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function releaseDid(
        $id
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;

        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/' . $id;

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'id' => $id,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'DZFlowroute\\Models\\Number26');
    }

    /**
     * Lets you set an alias on a specific DID.
     *
     * @param integer $id Phone number to purchase. Must be in 11-digit E.164 format; e.g. 12061231234.
     * @param string $alias text alias to associate with the DID.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function setDidAlias(
        $id, $alias
    ) {

        $body = new Models\NumberAlias();
        $body->alias = $alias;
        echo "Got alias of ".$alias."\n";
        echo "Sending body\n";
        var_dump($body->jsonSerialize());

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;

        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/' . $id;
        echo "Calling " .$_queryBuilder."\n";

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'id' => $id,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'DZFlowroute\\Models\\Number26');
    }

    /**
     * This endpoint lets you search for phone numbers by state or rate center, or by your specified search
     * value.
     *
     * @param integer $startsWith  (optional) Retrieve phone numbers that start with the specified value.
     * @param integer $contains    (optional) Retrieve phone numbers containing the specified value.
     * @param integer $endsWith    (optional) Retrieve phone numbers that end with the specified value.
     * @param integer $limit       (optional) Limits the number of items to retrieve. A maximum of 200 items can be
     *                             retrieved.
     * @param integer $offset      (optional) Offsets the list of phone numbers by your specified value. For example,
     *                             if you have 4 phone numbers and you entered 1 as your offset value, then only 3 of
     *                             your phone numbers will be displayed in the response.
     * @param string  $rateCenter  (optional) Filters by and displays phone numbers in the specified rate center.
     * @param string  $state       (optional) Filters by and displays phone numbers in the specified state. Optional
     *                             unless a ratecenter is specified.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function searchForPurchasablePhoneNumbers(
        $startsWith = NULL,
        $contains = NULL,
        $endsWith = NULL,
        $limit = NULL,
        $offset = NULL,
        $rateCenter = NULL,
        $state = NULL
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/available';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'starts_with' => $startsWith,
            'contains'    => $contains,
            'ends_with'   => $endsWith,
            'limit'       => $limit,
            'offset'      => $offset,
            'rate_center' => $rateCenter,
            'state'       => $state,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Returns a list of all Numbering Plan Area (NPA) codes containing purchasable phone numbers.
     *
     * @param integer $limit          (optional) Limits the number of items to retrieve. A maximum of 400 items can be
     *                                retrieved.
     * @param integer $offset         (optional) Offsets the list of phone numbers by your specified value. For example,
     *                                if you have 4 phone numbers and you entered 1 as your offset value, then only 3
     *                                of your phone numbers will be displayed in the response.
     * @param double  $maxSetupCost   (optional) Restricts the results to the specified maximum non-recurring setup
     *                                cost.
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listAvailableAreaCodes(
        $limit = NULL,
        $offset = NULL,
        $maxSetupCost = NULL
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/available/areacodes';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'limit'          => $limit,
            'offset'         => $offset,
            'max_setup_cost' => $maxSetupCost,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Returns a list of all Central Office (exchange) codes containing purchasable phone numbers.
     *
     * @param integer $limit          (optional) Limits the number of items to retrieve. A maximum of 200 items can be
     *                                retrieved.
     * @param integer $offset         (optional) Offsets the list of phone numbers by your specified value. For example,
     *                                if you have 4 phone numbers and you entered 1 as your offset value, then only 3
     *                                of your phone numbers will be displayed in the response.
     * @param double  $maxSetupCost   (optional) Restricts the results to the specified maximum non-recurring setup
     *                                cost.
     * @param integer $areacode       (optional) Restricts the results to the specified area code.
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listAvailableExchangeCodes(
        $limit = NULL,
        $offset = NULL,
        $maxSetupCost = NULL,
        $areacode = NULL
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/available/exchanges';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'limit'          => $limit,
            'offset'         => $offset,
            'max_setup_cost' => $maxSetupCost,
            'areacode'       => $areacode,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }
}
