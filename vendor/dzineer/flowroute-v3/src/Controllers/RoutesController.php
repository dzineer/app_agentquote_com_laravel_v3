<?php
/*
 * DZFlowroute
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace DZFlowroute\Controllers;

use DZFlowroute\APIException;
use DZFlowroute\APIHelper;
use DZFlowroute\Configuration;
use DZFlowroute\Models;
use DZFlowroute\Exceptions;
use DZFlowroute\Http\HttpRequest;
use DZFlowroute\Http\HttpResponse;
use DZFlowroute\Http\HttpMethod;
use DZFlowroute\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class RoutesController extends BaseController
{
    /**
     * @var RoutesController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return RoutesController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (NULL === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Returns a list of your inbound routes. From the list, you can then select routes to use as the
     * primary and failover routes for a phone number, which you can do via "Update Primary Voice Route for
     * a Phone Number" and "Update Failover Voice Route for a Phone Number".
     *
     * @param integer $limit  (optional) Limits the number of routes to retrieve. A maximum of 200 items can be
     *                        retrieved.
     * @param integer $offset (optional) Offsets the list of routes by your specified value. For example, if you have 4
     *                        inbound routes and you entered 1 as your offset value, then only 3 of your routes will be
     *                        displayed in the response.
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listInboundRoutes(
        $limit = NULL,
        $offset = NULL
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/routes';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'limit'  => $limit,
            'offset' => $offset,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized', $_httpContext);
        }

        if ($response->code == 404) {
            throw new APIException('Not Found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Creates a new inbound route which can then be associated with phone numbers. Please see "List
     * Inbound Routes" to review the route values that you can associate with your Flowroute phone numbers.
     *
     * @param Models\NewRoute $body The new inbound route to be created.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createAnInboundRoute(
        $body
    ) {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/routes';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Use this endpoint to update the primary voice route for a phone number. You must create the route
     * first by following "Create an Inbound Route". You can then assign the created route by specifying
     * its value in a PATCH request.
     *
     * @param integer $numberId  The phone number in E.164 11-digit North American format to which the primary route
     *                           for voice will be assigned.
     * @param void    $body      The primary route to be assigned.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updatePrimaryVoiceRouteForAPhoneNumber(
        $numberId,
        $routeId
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/{number_id}/relationships/primary_route';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'number_id' => $numberId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        //append body params
        $_body = "{\"data\": {\"type\": \"route\", \"id\": \"";
        $_body .= $routeId;
        $_body .= "\"}}";

        $response = Request::patch($_queryUrl, $_headers, $_body);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Use this endpoint to update the failover voice route for a phone number. You must create the route
     * first by following "Create an Inbound Route". You can then assign the created route by specifying
     * its value in a PATCH request.
     *
     * @param integer $numberId  The phone number in E.164 11-digit North American format to which the failover route
     *                           for voice will be assigned.
     * @param void    $body      The failover route to be assigned.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateFailoverVoiceRouteForAPhoneNumber(
        $numberId,
        $routeId
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/numbers/{number_id}/relationships/failover_route';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'number_id' => $numberId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'content-type'  => 'application/json; charset=utf-8',
            'user-agent'    => 'Flowroute SDK v3.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //append body params
        $_body = "{\"data\": {\"type\": \"route\", \"id\": \"";
        $_body .= $routeId;
        $_body .= "\"}}";

        $response = Request::patch($_queryUrl, $_headers, $_body);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorException(
                'Unauthorized – There was an issue with your API credentials.',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorException('The specified resource was not found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Returns a list of available points of presence for edge routing.
     *
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listPops() {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;

        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/routes/edge_strategies';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'Flowroute SDK v3.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != NULL) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized', $_httpContext);
        }

        if ($response->code == 404) {
            throw new APIException('Not Found', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }
}
